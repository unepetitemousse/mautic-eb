# Global bash functions for simpler cron jobs and maintenance of Mautic.

files:
  "/bin/console":
    mode: "0000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # console - Runs a console command as webapp user from anywhere in the EC2.
      #           Ensures we are using the webapp user.
      #           Works during deployment, and after instance is finalized.
      #
      # Example:
      #   console cache:clear
      params=$@
      if [ -f "./mautic/app/console" ]
      then
          sudo -u webapp bash -c ". /opt/elasticbeanstalk/support/envvars ; /usr/bin/php ./mautic/app/console $params"
      else
          sudo -u webapp bash -c ". /opt/elasticbeanstalk/support/envvars ; /usr/bin/php /var/app/current/mautic/app/console $params"
      fi

  "/bin/consoleloop":
    mode: "0000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # consoleloop - Runs a console command as webapp user from anywhere in the EC2.
      #               Ensures we are using the webapp user.
      #               Works during deployment, and after instance is finalized.
      #               Loops indefinately, usefull for updating a particular segment/campaign on any node.
      #
      # Example:
      #   console cache:clear
      params=$@
      if [ -z $( which ps ) ]
      then
          echo "ps is required to run this script."
          exit 1
      fi
      if [ -z $( which grep ) ]
      then
          echo "grep is required to run this script."
          exit 1
      fi
      if [ -z $( which nohup ) ]
      then
          echo "nohup is required to run this script."
          exit 1
      fi
      command="sudo nohup console $params"
      count=$( ps aux --no-headers 2>&1 | grep -c "$command" 2>&1 )
      while [ "$count" -lt "2" ]
      do
          eval ${command}
          sleep 10
          count=$( ps aux --no-headers 2>&1 | grep -c "$command" 2>&1 )
      done

  "/bin/cron":
    mode: "0000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # cron    - Run a mautic cron console command only if on the leader instance using aws-eb-cron.
      #
      # Example:
      #   * * * * * root cron mautic:emails:send
      params=$@
      if [ -f "./mautic/app/console" ]
      then
          sudo bash ./scripts/aws-eb-cron.sh /usr/bin/php ./mautic/app/console $params --no-interaction --no-ansi
      else
          sudo bash /var/app/current/scripts/aws-eb-cron.sh /usr/bin/php /var/app/current/mautic/app/console $params --no-interaction --no-ansi
      fi

  "/bin/cronloop":
    mode: "0000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # cronloop - Run a mautic cron console command in a loop if it is not already running.
      #            Useful for unusual situations where you might need very high throughput.
      #            Will only perform the cron task on the leading instance.
      #
      # Examples:
      #   * * * * * root cronloop mautic:campaigns:trigger -i
      params=$@
      if [ -z $( which ps ) ]
      then
          echo "ps is required to run this script."
          exit 1
      fi
      if [ -z $( which grep ) ]
      then
          echo "grep is required to run this script."
          exit 1
      fi
      if [ -z $( which nohup ) ]
      then
          echo "nohup is required to run this script."
          exit 1
      fi
      command="sudo nohup cron $params"
      count=$( ps aux --no-headers 2>&1 | grep -c "$command" 2>&1 )
      while [ "$count" -lt "2" ]
      do
          eval ${command}
          sleep 10
          count=$( ps aux --no-headers 2>&1 | grep -c "$command" 2>&1 )
      done